var documenterSearchIndex = {"docs":
[{"location":"#OceanTools.jl-1","page":"Home","title":"OceanTools.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Utilities for working with the Copernicus Ocean Datasets in Julia","category":"page"},{"location":"#Introduction-1","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The OceanTools.jl package provides a handful of helper functions to work with SEALEVEL_GLO_PHY_L4_NRT_OBSERVATIONS data from Copernicus in Julia. These are written to be","category":"page"},{"location":"#","page":"Home","title":"Home","text":"as fast as possible\neffectively parallelizable\neasily usable from CoherentStructures.jl","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This package was developed by Nathanael Schilling at TUM.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Run the following in the Julia REPL:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"]add https://github.com/CoherentStructures/OceanTools.jl.git","category":"page"},{"location":"#Disclaimer-1","page":"Home","title":"Disclaimer","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"These functions have not been tested in detail and probably have bugs. The author of this package is in no way affiliated with Copernicus.","category":"page"},{"location":"#Features-1","page":"Home","title":"Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The OceanTools.jl package provides julia utilities for reading in velocity and sea surface heights (ssh) from Copernicus datasets. This functionality relies on the NetCDF.jl package.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"There are also functions for interpolating the resulting values (trilinear + tricubic).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Tricubic interpolation is implemented using the algorithm of Lekien and Marsden's paper, along with a function to obtain the gradient (in space) of the interpolation function.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This gives a way of approximating geostrophic sea-surface velocities with the well-known formula","category":"page"},{"location":"#","page":"Home","title":"Home","text":"u = -A(y)partial_y h(xyt) v = A(y)partial_x h(xyt)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"where:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"u – longitudinal component of the velocity,\nv – latitudinal component of the velocity,\nx – longitude,\ny – latitude,\nh – sea-surface height.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Here, A(y) = gR^2 2 Omega sin y cos y  with g the gravitational constant, R the radius of the earth, Omega is the earth's mean angular velocity. This equation is implemented in the sshVelocityRHS function.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For a list of functions that are implemented by this package, consult the exports.jl file or the source code.","category":"page"},{"location":"example/#Example-Usage-1","page":"Example usage","title":"Example Usage","text":"","category":"section"},{"location":"example/#","page":"Example usage","title":"Example usage","text":"using  Distributed, Tensors, StaticArrays, Statistics, Plots\naddprocs(4) #Use 4 processors\n\nimport CoherentStructures\nusing OceanTools\n\n#Directory containing files like nrt_global_allsat_phy_l4_20170108_20170114.nc\nww_ocean_data = \"/media/public/schillna/ocean1/worldwide_ocean_data/\"\n\n#Read in data into p, missing values are set to zero\np, times = getP(ww_ocean_data, ndays=90, sshs=true, remove_nan=true)\n\n#Garbage collection on all processors\n@everywhere GC.gc()\n\n#Bounding corners of the box on which to plot\nLL = (147.0, 15.0)\nUR = (180.0, 48.0)\nTT = (times[1], times[end])\n\nCoherentStructures.plot_ftle(uv_trilinear, p, TT, LL, UR, 500, 500;\n       tolerance=1e-6, aspect_ratio=1, title=\"FTLE Field\")","category":"page"},{"location":"example/#","page":"Example usage","title":"Example usage","text":"(Image: )","category":"page"}]
}
